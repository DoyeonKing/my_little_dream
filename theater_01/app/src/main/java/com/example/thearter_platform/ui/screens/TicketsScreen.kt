package com.example.thearter_platform.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.rounded.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TicketsScreen(navController: NavController) {
    var currentLocation by remember { mutableStateOf("Âåó‰∫¨") }
    var selectedTab by remember { mutableStateOf(0) }
    val tabs = listOf("Êé®Ëçê", "ÂéÇÁâå", "ÂâßÂú∫")
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "üé´ Ë¥≠Á•®‰∏≠ÂøÉ",
                        fontWeight = FontWeight.Bold
                    ) 
                },
                actions = {
                    IconButton(onClick = { navController.navigate("search") }) {
                        Icon(Icons.Rounded.Search, "ÊêúÁ¥¢")
                    }
                    IconButton(onClick = { navController.navigate("ticket-community") }) {
                        Text("üë•", fontSize = 20.sp)
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
        ) {
            // Âú∞ÁêÜ‰ΩçÁΩÆÈÄâÊã©
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Rounded.LocationOn,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "ÂΩìÂâç‰ΩçÁΩÆÔºö$currentLocation",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    Spacer(modifier = Modifier.weight(1f))
                    TextButton(
                        onClick = { navController.navigate("city-selection") }
                    ) {
                        Text("ÂàáÊç¢ÂüéÂ∏Ç", color = MaterialTheme.colorScheme.onPrimaryContainer)
                    }
                }
            }
            
            // Ê†áÁ≠æÈ°µ
            TabRow(selectedTabIndex = selectedTab) {
                tabs.forEachIndexed { index, title ->
                    Tab(
                        selected = selectedTab == index,
                        onClick = { selectedTab = index },
                        text = { Text(title) }
                    )
                }
            }
            
            // ÂÜÖÂÆπÂå∫Âüü
            when (selectedTab) {
                0 -> LocationRecommendations(navController, currentLocation)
                1 -> BrandPerformances(navController)
                2 -> TheaterPerformances(navController)
            }
        }
    }
}

@Composable
fun LocationRecommendations(navController: NavController, location: String) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(16.dp)
    ) {
        item {
            Text(
                text = "$location ÁÉ≠Èó®Êé®Ëçê",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        items(5) { index ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { navController.navigate("performance-detail/${index + 1}") }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "$location ÁÉ≠Èó®ÊºîÂá∫ ${index + 1}",
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        )
                        Text(
                            text = "üî• ÁÉ≠Èó®",
                            fontSize = 12.sp,
                            color = MaterialTheme.colorScheme.error
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "ÊºîÂá∫Êó∂Èó¥Ôºö2024Âπ¥${index + 1}Êúà${index + 1}Êó•",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "ÊºîÂá∫Âú∞ÁÇπÔºö${location}Â§ßÂâßÈô¢",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "Á•®‰ª∑Ôºö¬•${(index + 1) * 100}",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
        
        item {
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "Âø´ÈÄüË¥≠Á•®",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        item {
            Button(
                onClick = { navController.navigate("city-selection") },
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(Icons.Rounded.LocationOn, null)
                Spacer(modifier = Modifier.width(8.dp))
                Text("ÈÄâÊã©ÂüéÂ∏ÇË¥≠Á•®")
            }
        }
        
        item {
            Spacer(modifier = Modifier.height(8.dp))
            Button(
                onClick = { navController.navigate("ticket-exchange") },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("üîÑ", fontSize = 18.sp)
                Spacer(modifier = Modifier.width(8.dp))
                Text("Á•®Âä°‰∫§Êç¢")
            }
        }
        
        item {
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "ÁõòÁ•®ÂäüËÉΩ",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        item {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { navController.navigate("ticket-community") }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üé≠ ÁõòÁ•®Á§æÂå∫",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "‰∏éÂÖ∂‰ªñÁî®Êà∑‰∫§Êç¢„ÄÅËΩ¨ËÆ©Á•®Âä°",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "ËΩ¨ËÆ© | Ê±ÇË¥≠ | ‰∫§Êç¢",
                            fontSize = 12.sp,
                            color = MaterialTheme.colorScheme.primary
                        )
                        Text(
                            text = "üî• ÁÉ≠Èó®",
                            fontSize = 12.sp,
                            color = MaterialTheme.colorScheme.error
                        )
                    }
                }
            }
        }
        
        item {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { navController.navigate("create-ticket-post") }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üìù ÂèëÂ∏ÉÁ•®Âä°",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "ÂèëÂ∏ÉËΩ¨ËÆ©ÊàñÊ±ÇË¥≠‰ø°ÊÅØ",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        FilterChip(
                            selected = false,
                            onClick = { },
                            label = { Text("ËΩ¨ËÆ©") }
                        )
                        FilterChip(
                            selected = false,
                            onClick = { },
                            label = { Text("Ê±ÇË¥≠") }
                        )
                        FilterChip(
                            selected = false,
                            onClick = { },
                            label = { Text("‰∫§Êç¢") }
                        )
                    }
                }
            }
        }
        
        item {
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "ÊàëÁöÑÁ•®Âä°",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        item {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { /* ÊàëÁöÑÁ•®Âä°ÂäüËÉΩÂºÄÂèë‰∏≠ */ }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üé´ ÊàëÁöÑÁ•®Âä°",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Êü•ÁúãÂ∑≤Ë¥≠‰π∞ÁöÑÁ•®Âä°",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "ÂæÖ‰ΩøÁî®Ôºö3Âº†",
                            fontSize = 12.sp,
                            color = MaterialTheme.colorScheme.primary
                        )
                        Text(
                            text = "Â∑≤‰ΩøÁî®Ôºö12Âº†",
                            fontSize = 12.sp,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun BrandPerformances(navController: NavController) {
    val brands = listOf("ÂõΩÂÆ∂Â§ßÂâßÈô¢", "‰∏äÊµ∑Â§ßÂâßÈô¢", "ÂπøÂ∑ûÂ§ßÂâßÈô¢", "Ê∑±Âú≥Èü≥‰πêÂéÖ", "Êù≠Â∑ûÂ§ßÂâßÈô¢")
    
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(16.dp)
    ) {
        item {
            Text(
                text = "ÂéÇÁâåÊºîÂá∫",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        items(brands.size) { index ->
            val brand = brands[index]
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { /* ÂéÇÁâåËØ¶ÊÉÖÂäüËÉΩÂºÄÂèë‰∏≠ */ }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = brand,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "ÂΩìÂâçÊºîÂá∫Ôºö${index + 3}Âú∫",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "Á•®‰ª∑ËåÉÂõ¥Ôºö¬•${(index + 1) * 100}-${(index + 1) * 500}",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        OutlinedButton(onClick = { /* Êü•ÁúãËØ¶ÊÉÖ */ }) {
                            Text("Êü•ÁúãËØ¶ÊÉÖ")
                        }
                        Button(onClick = { /* Ë¥≠Á•® */ }) {
                            Text("Á´ãÂç≥Ë¥≠Á•®")
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun TheaterPerformances(navController: NavController) {
    val theaters = listOf(
        "ÂõΩÂÆ∂Â§ßÂâßÈô¢" to "Âåó‰∫¨",
        "‰∏äÊµ∑Â§ßÂâßÈô¢" to "‰∏äÊµ∑", 
        "ÂπøÂ∑ûÂ§ßÂâßÈô¢" to "ÂπøÂ∑û",
        "Ê∑±Âú≥Èü≥‰πêÂéÖ" to "Ê∑±Âú≥",
        "Êù≠Â∑ûÂ§ßÂâßÈô¢" to "Êù≠Â∑û"
    )
    
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(16.dp)
    ) {
        item {
            Text(
                text = "ÂâßÂú∫ÊºîÂá∫",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        items(theaters.size) { index ->
            val theater = theaters[index]
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                onClick = { /* ÂâßÂú∫ËØ¶ÊÉÖÂäüËÉΩÂºÄÂèë‰∏≠ */ }
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = theater.first,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Âú∞ÂùÄÔºö${theater.second}Â∏ÇÊüêÊüêÂå∫ÊüêÊüêË°óÈÅì",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "ÂΩìÂâçÊºîÂá∫Ôºö${index + 2}Âú∫",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "ÂÆπÈáèÔºö${(index + 1) * 500}‰∫∫",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        OutlinedButton(onClick = { /* Êü•ÁúãËØ¶ÊÉÖ */ }) {
                            Text("Êü•ÁúãËØ¶ÊÉÖ")
                        }
                        Button(onClick = { /* Ë¥≠Á•® */ }) {
                            Text("Á´ãÂç≥Ë¥≠Á•®")
                        }
                    }
                }
            }
        }
    }
}
